---
title: "Hands-on Exercise 3-1"
author: "Huang Zihan"
date: "May 1, 2025"
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
---

# 3 Programming Interactive Data Visualisation with R

# 3.1 Getting Started

## 1. Loading packages

Packages Introduction

-   **ggiraph**: to make ggplot graphics interactive
-   **plotly**: to plot interactive statistical graphs
-   **DT**: to provide an R interface to the JavaScript library DataTables to create interactive table on html page
-   **tidyverse**: a family of modern R packages specially designed to support data science, analysis and communication task
-   **patchwork**: to combine multiple ggplot2 graphs into one figure

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) 
```

## 2. Importing data

```{r}
exam_data<-read_csv("Exam_data.csv")
```

# 3.2 ggiraph methods

## 1. tooltip

Tooltip's function is to **display the information** when the mouse is over elements.

### (1) Displaying one information on tooltip

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, 
                           binwidth = 1, method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)
```

### (2) Displaying multiple information on tooltip

```{r}
exam_data$tooltip <- paste0("Name = ", exam_data$ID,"\n CLASS = ", exam_data$CLASS)
# create a new field called tooltip, including ID and CLASS.
# paste0(): to concatenate strings

p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = exam_data$tooltip),
                           stackgroups = TRUE, binwidth = 1, 
                           method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)
```

### (3) Customising Tooltip style

```{r}
tooltip_css <- "background-color:white; font-style:bold; color:black;" 

p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618,
  options = list(opts_tooltip(css = tooltip_css))) 
```

### (4) Displaying statistics on tooltip

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE)) +
  stat_summary(aes(y = MATHS, tooltip = after_stat(tooltip(y, ymax))),  
    fun.data = "mean_se", geom = GeomInteractiveCol,fill = "light pink") +
  stat_summary(aes(y = MATHS),fun.data = mean_se,geom = "errorbar", width = 0.2, size = 0.2)

girafe(ggobj = gg_point, width_svg = 8, height_svg = 8*0.618)
```

## 2. Data_id

**Data_id** is used to assign a unique identifier to each graphic element. In this case, elements associated with a data_id will be highlighted upon mouse over.

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(data_id = CLASS), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)
```

### (1)Styling hover effect

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(data_id = CLASS), stackgroups = TRUE, binwidth = 1, method = "histodot") +               
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p,width_svg = 6,height_svg = 6*0.618,
  options = list(opts_hover(css = "fill: #202020;"), opts_hover_inv(css = "opacity:0.2;")))                                        
```

### (2) Combing tooltip and hover effect

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip=CLASS,data_id = CLASS), stackgroups = TRUE, binwidth = 1, method = "histodot") +               
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p,width_svg = 6,height_svg = 6*0.618,
  options = list(opts_hover(css = "fill: #202020;"), opts_hover_inv(css = "opacity:0.2;")))                                        
```

## 3. Onclick

**Onclick** is to define a JavaScript action that happens when the user clicks on a visual element.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(onclick = onclick), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)   
```

## 4. Coordinate multiple views with ggiraph

To achieve this, appropriate interactive functions of ggiraph will be used to create the multiple views, and **patchwork** function will be used inside girafe function to coordinate multiple views.

```{r}
p1 <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(data_id = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL, breaks = NULL)

p2 <- ggplot(data=exam_data, aes(x = ENGLISH)) +
  geom_dotplot_interactive(aes(data_id = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL, breaks = NULL)

girafe(code = print(p1 + p2), width_svg = 6, height_svg = 3, 
       options = list(opts_hover(css = "fill: #202020;"), 
              opts_hover_inv(css = "opacity:0.2;"))) 
```

# 3.3 plotly methods

## 1. plot_ly() method

```{r}
plot_ly(data = exam_data, x = ~MATHS, y = ~ENGLISH, color = ~RACE)
```

## 2. ggplotly() method

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS, y = ENGLISH, colour = RACE)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100))

ggplotly(p)
```

## 3. Coordinate multiple views with plotly

Different from coordinating multiple views with ggiraph by using patchwork, Here are three steps to coordinate multiple views with plotly.

-   **highlight_key()** of plotly is used as shared data

-   2 scatterplots will be created by using **ggplot2** functions

-   **subplot()** of plotly is used to place them next to each other side-by-side

```{r}
d <- highlight_key(exam_data)

p1 <- ggplot(data=d,aes(x = MATHS, y = ENGLISH, colour = RACE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100))

p2 <- ggplot(data=d, aes(x = MATHS, y = SCIENCE, colour = RACE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100))

subplot(ggplotly(p1), ggplotly(p2))
```

# 3.4 crosstalk methods

**Crosstalk** is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

## 1. DT package

```{r}
DT::datatable(exam_data, class= "compact")
```

## 2. Linked brushing

-   **Linked brushing** is an interactive feature where selecting data points in one widget highlights the same points in another widget.
-   **highlight()** is a function of plotly package, to set a variety of options for brushing (i.e., highlighting) multiple plots.
-   **bscols()** is a function of crosstalk package, to make it easy to put HTML elements side by side.

```{r}
d <- highlight_key(exam_data) 

p <- ggplot(d, aes(ENGLISH, MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100))

gg <- highlight(ggplotly(p), "plotly_selected")  

crosstalk::bscols(gg, DT::datatable(d), widths = 5)        
```
