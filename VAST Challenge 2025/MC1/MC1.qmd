---
title: "MC1"
author: "Huang Zihan"
date: "May 17, 2025"
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
---

```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)
```

```{r}
kg<-fromJSON("MC1_release/MC1_graph.json")
```

# Inspect Structure

```{r}
str(kg, max.level=1)
```

```{r}
nodes_tbl<-as_tibble(kg$nodes)

edges_tbl<-as_tibble(kg$links) 
```

# Initial EDA

```{r}
ggplot(data = edges_tbl,
       aes(y=`Edge Type`))+
  geom_bar()
```

```{r}
ggplot(data = nodes_tbl,
       aes(y=`Node Type`))+
  geom_bar()
```

## Creating Knowledge Graph

### Step 1: Mapping from node id to row index

```{r}
id_map <- tibble (id = nodes_tbl$id,
                  index = seq_len(
                    nrow(nodes_tbl)
                  ))
```

This ensures each id from your node list is mapped to the correct row number

### Step 2: Map source and traget IDs to row indices

```{r}
edges_tbl<-edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename (from = index) %>%
  left_join(id_map, by = c("target"="id")) %>%
  rename(to = index)
```

### Step 3: Filter out any unmatched (invalid) edges

```{r}
edges_tbl<-edges_tbl %>%
  filter(!is.na(from),!is.na(to))
```

### Step 4: Creating the graph

tbl_graph() is used to create tidygraph's graph pbject by using the code chunk below.

```{r}
graph<-tbl_graph(nodes = nodes_tbl,
                 edges = edges_tbl,
                 directed = kg$directed)
```

## Visualizing the knowledge graph

```{r}
set.seed(1234)
```

### Visualizing the whole graph

```{r}
#| eval: false
ggraph(graph, layout = "fr")+
  geom_edge_link(alpha = 0.3, colour ="gray")+
  geom_node_point(aes(color = `Node Type`),
                  size = 4)+
  geom_node_text(aes(label=name),
                 repel = TRUE,
                 size =2.5)+
  theme_void()
```

### Visualizing sub-graph

#### Step 1: Filter edges to only "Memberof"

```{r}
graph_memberof<-graph %>%
  activate(edges) %>%
  filter(`Edge Type`=="MemberOf")
```

#### Step 2: Extract only connected nodes (i.e., used in these edges)

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from,to) %>%
  unlist() %>%
  unique()
```

#### Step 3: Keep only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)
```

#### Plot the sub-graph

```{r}
ggraph(graph_memberof,
       layout = "fr")+
  geom_edge_link(alpha = 0.5,
                 colour = "gray")+
  geom_node_point(aes(color=`Node Type`),
                  size = 1)+
  geom_node_text(aes(label = name),
                 repel=TRUE,
                 size=2.5)+
  theme_void()
```
